package com.nadaf.vastu_cite

import android.os.Bundle
import android.widget.Toast
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.nadaf.vastu_cite.ui.theme.VastuCiteTheme
import androidx.compose.ui.platform.LocalFocusManager


class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            VastuCiteTheme {
                VastuCiteScreen()
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun VastuCiteScreen() {
    Scaffold(
        topBar = {
            TopAppBar(
                title = { Text("Vastu Cite") }
            )
        }
    ) { innerPadding ->
        DimensionInputForm(modifier = Modifier.padding(innerPadding))
    }
}

@Composable
fun DimensionInputForm(modifier: Modifier = Modifier) {
    var height by remember { mutableStateOf("") }
    var width by remember { mutableStateOf("") }
    var showList by remember { mutableStateOf(false) }
    var updatedItems by remember { mutableStateOf(emptyList<Triple<String, String, String>>()) }
    val context = LocalContext.current
    val focusManager = LocalFocusManager.current // üëà Used to dismiss keyboard
    Column(
        modifier = modifier
            .fillMaxSize()
            .padding(horizontal = 24.dp), // Removed vertical padding
        verticalArrangement = Arrangement.Top // Align everything to top
    ) {
        Text(
            text = "Enter Dimensions",
            style = MaterialTheme.typography.headlineSmall,
            modifier = Modifier.padding(vertical = 16.dp)
        )
        OutlinedTextField(
            value = height,
            onValueChange = { input ->
                if (input.all { it.isDigit() }) {
                    height = input
                }
            },
            label = { Text("Height") },
            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
            modifier = Modifier
                .fillMaxWidth()
                .padding(bottom = 8.dp) // Tight spacing below
        )
        OutlinedTextField(
            value = width,
            onValueChange = { input ->
                if (input.all { it.isDigit() }) {
                    width = input
                }
            },
            label = { Text("Width") },
            keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
            modifier = Modifier
                .fillMaxWidth()
                .padding(bottom = 8.dp) // Tight spacing below
        )
        Button(
            onClick = {
                focusManager.clearFocus()
                if (height.isBlank() || width.isBlank()) {
                    Toast.makeText(context, "Please enter both height and width", Toast.LENGTH_SHORT).show()
                } else {
                    val h = height.toIntOrNull()
                    val w = width.toIntOrNull()
                    if (h == null || w == null) {
                        Toast.makeText(context, "Invalid input. Only whole numbers allowed.", Toast.LENGTH_SHORT).show()
                    } else {
                        val area = kshetraphala(h, w)
                        val ayaResult = aya(h, w)

                       // Toast.makeText(context, "Area: $area, Aya: $ayaResult", Toast.LENGTH_SHORT).show()
                        updatedItems = getUpdatedItems(h, w)
                        showList = true
                    }
                }
            },
            modifier = Modifier
                .align(Alignment.End)
                .padding(vertical = 4.dp) // Minimal vertical padding
        ) {
            Text("Submit")
        }
        if (showList) {
            Spacer(modifier = Modifier.height(16.dp)) // Slight spacing before list
            ScrollableThreeColumnList(items = updatedItems)
        }
    }

}

@Composable
fun ScrollableThreeColumnList(items: List<Triple<String, String, String>>) {
    LazyColumn(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp),
        verticalArrangement = Arrangement.spacedBy(12.dp)
    ) {
        items(items) { (label, value, extra) ->
            Row(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 8.dp),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Text(text = label, modifier = Modifier.weight(1f), fontSize = 16.sp)
                Text(text = value, modifier = Modifier.weight(1f), fontSize = 16.sp)
                Text(text = extra, modifier = Modifier.weight(1f), fontSize = 16.sp)
            }
            Divider(color = Color.LightGray, thickness = 1.dp)
        }
    }
}

fun kshetraphala(a: Int, b: Int): Int {
    return a * b
}

fun aya(a: Int, b: Int): Int {
    var result = a * b
    result = result * 9
    result = result % 8
    return if (result == 0) {
        8
    } else {
        result
    }
}

fun dhana(a: Int, b: Int): Int {
    var result = a * b
    result *= 8
    result %= 12
    println("Dhana is $result") // Equivalent to NSLog
    return if (result == 0) {
        12
    } else {
        result
    }
}

fun runa(a: Int, b: Int): Int {
    var result = a * b
    result *= 3
    result %= 8
    println("runa is $result") // Equivalent to NSLog
    return if (result == 0) {
        8
    } else {
        result
    }
}

fun thithi(a: Int, b: Int): Int {
    var result = a * b
    result *= 8
    result %= 30
    println("thithi is $result")
    return if (result == 0) 30 else result
}

fun vara(a: Int, b: Int): Int {
    var result = a * b
    result *= 9
    result %= 7
    println("vara is $result")
    return if (result == 0) 7 else result
}

fun nakshatra(a: Int, b: Int): Int {
    var result = a * b
    result *= 8
    result %= 27
    println("nakshatra is $result")
    return if (result == 0) 27 else result
}

fun yoga(a: Int, b: Int): Int {
    var result = a * b
    result *= 4
    result %= 27
    println("yoga is $result")
    return if (result == 0) 27 else result
}

fun karma(a: Int, b: Int): Int {
    var result = a * b
    result *= 5
    result %= 11
    println("karma is $result")
    return if (result == 0) 11 else result
}

fun amsha(a: Int, b: Int): Int {
    var result = a * b
    result *= 6
    result %= 9
    println("amsha is $result")
    return if (result == 0) 9 else result
}

fun ayushya(a: Int, b: Int): Int {
    var result = a * b
    result *= 9
    result %= 120
    println("ayushya is $result")
    return if (result == 0) 120 else result
}

fun dikkpalakaru(a: Int, b: Int): Int {
    var result = a * b
    result *= 9
    result %= 120
    result %= 8
    println("dikkpalakaru is $result")
    return if (result == 0) 8 else result
}


fun ayaString(result: Int): String {
    println("Aya is $result")
    return when (result) {
        1 -> "‡≤¶‡≥ç‡≤µ‡≤ú‡≤Ø‡≤æ"
        2 -> "‡≤ß‡≥Ç‡≤Æ‡≤∞‡≤æ‡≤Ø"
        3 -> "‡≤∏‡≤ø‡≤Ç‡≤π‡≤æ‡≤Ø‡≤æ"
        4 -> "‡≤∂‡≥ç‡≤µ‡≤æ‡≤®‡≤æ‡≤Ø"
        5 -> "‡≤µ‡≥É‡≤∑‡≤¨‡≤æ‡≤Ø‡≤æ"
        6 -> "‡≤ñ‡≤∞‡≤æ‡≤Ø"
        7 -> "‡≤ó‡≤ú‡≤æ‡≤Ø"
        8 -> "‡≤ï‡≤æ‡≤ï‡≤æ‡≤Ø‡≤æ"
        else -> "‡≤Ö‡≤®‡≥ç‡≤µ‡≤Ø‡≤ø‡≤∏‡≥Å‡≤µ‡≥Å‡≤¶‡≤ø‡≤≤‡≥ç‡≤≤"
    }
}

fun thithiStr(result: Int): String {
    return when (result) {
        15 -> "‡≤π‡≥Ç‡≤®‡≤ø‡≤Æ‡≥Ü"
        30 -> "‡≤Ö‡≤Æ‡≤µ‡≤æ‡≤∏‡≥Ü"
        1, 4, 8, 9, 14 -> "‡≤Ö‡≤∂‡≥Å‡≤≠"
        2, 3, 5, 6, 7, 10, 11, 12, 13 -> "‡≤â‡≤§‡≥ç‡≤§‡≤Æ"
        else -> "‡≤Ö‡≤®‡≥ç‡≤µ‡≤Ø‡≤ø‡≤∏‡≥Å‡≤µ‡≥Å‡≤¶‡≤ø‡≤≤‡≥ç‡≤≤"
    }
}

fun ayushyaStr(result: Int): String {
    return when {
        result < 59 -> "‡≤Ö‡≤∂‡≥Å‡≤≠"
        result > 59 -> "‡≤∂‡≥Å‡≤≠"
        else -> ""
    }
}

fun varaStr(result: Int): String {
    return when (result) {
        2 -> "‡≤∂‡≥Å‡≤≠, ‡≤Ö‡≤ß‡≤ø‡≤ï ‡≤µ‡≥É‡≤¶‡≥ç‡≤ß‡≤ø"
        4 -> "‡≤∂‡≥Å‡≤≠, ‡≤ê‡≤∂‡≥ç‡≤µ‡≤∞‡≥ç‡≤Ø,‡≤ß‡≤®"
        5 -> "‡≤ß‡≤®, ‡≤ï‡≤®‡≤ï, ‡≤Æ‡≤∞‡≤ø‡≤Ø‡≤æ‡≤¶‡≥Ü"
        6 -> "‡≤∏‡≤Ç‡≤§‡≤æ‡≤® ‡≤µ‡≥É‡≤¶‡≥ç‡≤ß‡≤ø"
        0 -> "‡≤∏‡≤æ‡≤ß‡≤æ‡≤∞‡≤® ‡≤´‡≤≤"
        else -> "‡≤Ö‡≤®‡≥ç‡≤µ‡≤Ø‡≤ø‡≤∏‡≥Å‡≤µ‡≥Å‡≤¶‡≤ø‡≤≤‡≥ç‡≤≤"
    }
}

fun nakshatraStr(result: Int): String {
    return when (result) {
        4, 5, 8, 12, 13 -> "‡≤∂‡≥Å‡≤≠"
        else -> "‡≤Ö‡≤∂‡≥Å‡≤≠"
    }
}

fun yogaStr(result: Int): String {
    return when (result) {
        1, 6, 9, 10, 13, 15, 17, 19, 27 -> "‡≤Ö‡≤∂‡≥Å‡≤≠"
        else -> "‡≤∂‡≥Å‡≤≠"
    }
}

fun karnaStr(result: Int): String {
    return when (result) {
        1, 2, 3, 4, 5 -> "‡≤∂‡≥Å‡≤≠"
        else -> "‡≤Ö‡≤∂‡≥Å‡≤≠"
    }
}

fun amshyaStr(result: Int): String {
    return when (result) {
        1 -> "‡≤®‡≤∏‡≥ç‡≤ü‡≤µ‡≥Å"
        2 -> "‡≤µ‡≥É‡≤¶‡≥ç‡≤¶‡≤ø‡≤Ø‡≥Å"
        3 -> "‡≤∏‡≤Ç‡≤™‡≤§‡≥ç‡≤§‡≥Å"
        4 -> "‡≤¶‡≥Å‡≤É‡≤ñ"
        5 -> "‡≤Æ‡≤∞‡≤£ ‡≤¨‡≥Ä‡≤§‡≤ø"
        6 -> "‡≤ö‡≥ã‡≤∞ ‡≤≠‡≤Ø"
        7 -> "‡≤∏‡≤Ç‡≤§‡≤æ‡≤® ‡≤µ‡≥É‡≤¶‡≥ç‡≤¶‡≤ø‡≤Ø‡≥Å"
        8 -> "‡≤ó‡≥ã‡≤™‡≤∑‡≥Å ‡≤µ‡≥É‡≤¶‡≥ç‡≤¶‡≤ø‡≤Ø‡≥Å"
        9, 0 -> "‡≤∏‡≤Ç‡≤§‡≥ã‡≤∑"
        else -> "‡≤Ö‡≤®‡≥ç‡≤µ‡≤Ø‡≤ø‡≤∏‡≥Å‡≤µ‡≥Å‡≤¶‡≤ø‡≤≤‡≥ç‡≤≤"
    }
}

fun dikkpalakaruStr(result: Int): String {
    return when (result) {
        1 -> "‡≤∏‡≤ï‡≤≤ ‡≤∏‡≥å‡≤≠‡≤æ‡≤ó‡≥ç‡≤Ø"
        5 -> "‡≤µ‡≤∞‡≥Å‡≤£ ‡≤ß‡≤®‡≤ï‡≤∞ ‡≤µ‡≥É‡≤¶‡≥ç‡≤¶‡≤ø"
        7 -> "‡≤ï‡≥Å‡≤≠‡≥á‡≤∞"
        0 -> "‡≤Æ‡≤π‡≤æ‡≤∂‡≥Å‡≤≠"
        else -> "‡≤Ö‡≤∂‡≥Å‡≤≠"
    }
}



fun getUpdatedItems(height: Int, width: Int): List<Triple<String, String, String>> {
    val area = kshetraphala(height, width)
    val ayaValue = aya(height, width)
    val dhanaValue = dhana(height, width)
    val runaValue = runa(height, width)
    val ayushyaValue = ayushya(height, width)
    val thithiValue = thithi(height, width)
    val varaValue = vara(height, width)
    val nakshatraValue = nakshatra(height, width)
    val yogaValue = yoga(height, width)
    val karnaValue = karma(height, width)
    val amshaValue = amsha(height, width)
    val dikkpalakaruValue = dikkpalakaru(height, width)

    var ayaname = ayaString(ayaValue)
    var ayushyaName = ayushyaStr(ayushyaValue)
    var thitiName = thithiStr(thithiValue)
    var varaName = varaStr(varaValue)
    var nakshatraName = nakshatraStr(nakshatraValue)
    var yogaName = yogaStr(yogaValue)
    var karnaName = karnaStr(karnaValue)
    var amshaName = amshyaStr(amshaValue)
    var dikpalakaruName = dikkpalakaruStr(dikkpalakaruValue)

    val originalItems = listOf(
        Triple("‡≤ï‡≥ç‡≤∑‡≥Ü‡≥ï‡≤§‡≥ç‡≤∞‡≤´‡≤≤", "Value 1", "‡≤Ö‡≤®‡≥ç‡≤µ‡≤Ø‡≤ø‡≤∏‡≥Å‡≤µ‡≥Å‡≤¶‡≤ø‡≤≤‡≥ç‡≤≤"),
        Triple("‡≤Ü‡≤Ø‡≤æ", "Value 2", "Extra 2"),
        Triple("‡≤ß‡≤®", "Value 3", "‡≤Ö‡≤®‡≥ç‡≤µ‡≤Ø‡≤ø‡≤∏‡≥Å‡≤µ‡≥Å‡≤¶‡≤ø‡≤≤‡≥ç‡≤≤"),
        Triple("‡≤∞‡≥Ç‡≤®", "Value 4", "‡≤Ö‡≤®‡≥ç‡≤µ‡≤Ø‡≤ø‡≤∏‡≥Å‡≤µ‡≥Å‡≤¶‡≤ø‡≤≤‡≥ç‡≤≤"),
        Triple("‡≤Ü‡≤Ø‡≥Å‡≤∑‡≥ç‡≤Ø", "Value 5", "Extra 5"),
        Triple("‡≤§‡≤ø‡≤•‡≤ø", "Value 6", "Extra 6"),
        Triple("‡≤µ‡≤æ‡≤∞", "Value 6", "Extra 6"),
        Triple("‡≤®‡≤ï‡≥ç‡≤∑‡≤§‡≥ç‡≤∞", "Value 6", "Extra 6"),
        Triple("‡≤Ø‡≥Ü‡≥Ç‡≥ï‡≤ó", "Value 6", "Extra 6"),
        Triple("‡≤ï‡≤∞‡≥ç‡≤£", "Value 6", "Extra 6"),
        Triple("‡≤Ö‡≤Ç‡≤∂", "Value 6", "Extra 6"),
        Triple("‡≤¶‡≤ø‡≤ï‡≥ç‡≤™‡≤æ‡≤≤‡≤ï‡≤∞‡≥Å", "Value 6", "Extra 6")
    )

    return originalItems.map { triple ->
        when (triple.first) {
            "‡≤ï‡≥ç‡≤∑‡≥Ü‡≥ï‡≤§‡≥ç‡≤∞‡≤´‡≤≤" -> Triple(triple.first, area.toString(), triple.third)
            "‡≤Ü‡≤Ø‡≤æ" -> Triple(triple.first, ayaValue.toString(), ayaname)
            "‡≤ß‡≤®" -> Triple(triple.first, dhanaValue.toString(), triple.third)
            "‡≤∞‡≥Ç‡≤®" -> Triple(triple.first, runaValue.toString(), triple.third)
            "‡≤Ü‡≤Ø‡≥Å‡≤∑‡≥ç‡≤Ø" -> Triple(triple.first, ayushyaValue.toString(), ayushyaName)
            "‡≤§‡≤ø‡≤•‡≤ø" -> Triple(triple.first, thithiValue.toString(), thitiName)
            "‡≤µ‡≤æ‡≤∞" -> Triple(triple.first, varaValue.toString(), varaName)
            "‡≤®‡≤ï‡≥ç‡≤∑‡≤§‡≥ç‡≤∞" -> Triple(triple.first, nakshatraValue.toString(), nakshatraName)
            "‡≤Ø‡≥Ü‡≥Ç‡≥ï‡≤ó" -> Triple(triple.first, yogaValue.toString(), yogaName)
            "‡≤ï‡≤∞‡≥ç‡≤£" -> Triple(triple.first, karnaValue.toString(), karnaName)
            "‡≤Ö‡≤Ç‡≤∂" -> Triple(triple.first, amshaValue.toString(), amshaName)
            "‡≤¶‡≤ø‡≤ï‡≥ç‡≤™‡≤æ‡≤≤‡≤ï‡≤∞‡≥Å" -> Triple(triple.first, dikkpalakaruValue.toString(), dikpalakaruName)
            else -> triple
        }
    }
}

